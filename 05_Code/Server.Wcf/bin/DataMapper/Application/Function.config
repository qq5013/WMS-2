<?xml version="1.0" encoding="utf-8"?>

<sqlMap namespace="Function" xmlns="http://ibatis.apache.org/mapping"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <alias>
    <typeAlias alias="Function" type="Business.Domain.Application.Function,Business.Domain" />
  </alias>
    
  <!-- 缓存机制 -->
  <cacheModels>
    <cacheModel id="FunctionCache" implementation="MEMORY">
      <!-- 设定缓存有效期，如果超过此设定值，则将此CacheModel缓存清空 -->
      <flushInterval minutes="5" />
      <flushOnExecute statement="Function.Insert" />
      <flushOnExecute statement="Function.Update" />
      <flushOnExecute statement="Function.Delete" />
      <flushOnExecute statement="Function.DeleteAll" />
      <property name="Type" value="Weak" />
    </cacheModel>
  </cacheModels>

  <resultMaps>
    <resultMap class="Function" id="Function_Result">
      <result column="ApplicationId" property="ApplicationId" />
      <result column="FunctionId" property="FunctionId" />
      <result column="FunctionLevel" property="FunctionLevel" />
      <result column="ParentId" property="ParentId" />
      <result column="FunctionCode" property="FunctionCode" />
      <result column="FunctionName" property="FunctionName" />
      <result column="ResourceIdentifier" property="ResourceIdentifier" />
      <result column="Remark" property="Remark" />
      <result column="IsActive" property="IsActive" />
    </resultMap>
  </resultMaps>

  <parameterMaps>
    <parameterMap id="SplitPagerParameters" class="Hashtable">
      <parameter property="TableName" column="TableName" />
      <parameter property="SelectFields" column="SelectFields" />
      <parameter property="OrderByField" column="OrderByField" />
      <parameter property="PageSize" column="PageSize" />
      <parameter property="PageIndex" column="PageIndex" />
      <parameter property="OrderType" column="OrderType" />
      <parameter property="SelectCondition" column="SelectCondition" />
      <parameter property="RecordsCount" column="RecordsCount" direction="Output" />
    </parameterMap>
  </parameterMaps>

  <statements>
    <select id="Function.Get" resultMap="Function_Result" cacheModel="FunctionCache">
      <![CDATA[
                SELECT ApplicationId,FunctionId,FunctionLevel,ParentId,FunctionCode,FunctionName,ResourceIdentifier,Remark,IsActive FROM dbo.[Function] WITH (NOLOCK)
                    WHERE FunctionId = #FunctionId#
            ]]>	
    </select>

    <select id="Function.GetAll" resultMap="Function_Result">
      <![CDATA[
                SELECT ApplicationId,FunctionId,FunctionLevel,ParentId,FunctionCode,FunctionName,ResourceIdentifier,Remark,IsActive
                    FROM dbo.[Function] WITH (NOLOCK)
            ]]>
    </select>

    <select id="Function.GetByCondition" resultMap="Function_Result" cacheModel="FunctionCache">
      <![CDATA[
                SELECT ApplicationId,FunctionId,FunctionLevel,ParentId,FunctionCode,FunctionName,ResourceIdentifier,Remark,IsActive
                    FROM dbo.[Function] WITH (NOLOCK)
                    WHERE $value$
            ]]>
    </select>

    <procedure id="Function.GetByPager" parameterMap="SplitPagerParameters" resultMap="Function_Result">
      <![CDATA[
                Usp_SplitPager
            ]]>
    </procedure>

    <insert id="Function.Insert" parameterClass="Function">
      <![CDATA[
                INSERT INTO dbo.[Function] 
                    (ApplicationId,FunctionLevel,ParentId,FunctionCode,FunctionName,ResourceIdentifier,Remark,IsActive) 
                VALUES 
                    (#ApplicationId#,#FunctionLevel#,#ParentId#,#FunctionCode#,#FunctionName#,#ResourceIdentifier#,#Remark#,#IsActive#)
            ]]>	
      <selectKey resultClass="int" type="post" property="FunctionId"> 
        <![CDATA[
                SELECT @@IDENTITY as value
            ]]>
      </selectKey>
    </insert>

    <update id="Function.Update" parameterClass="Function">
      <![CDATA[
                UPDATE dbo.[Function] SET ApplicationId = #ApplicationId#,FunctionLevel = #FunctionLevel#,ParentId = #ParentId#,FunctionCode = #FunctionCode#,FunctionName = #FunctionName#,ResourceIdentifier = #ResourceIdentifier#,Remark = #Remark#,IsActive = #IsActive#
                    WHERE FunctionId = #FunctionId#
            ]]>
    </update>

    <delete id="Function.Delete" parameterClass="Function">
      <![CDATA[
                DELETE FROM dbo.[Function] WHERE FunctionId = #FunctionId#
            ]]>
    </delete>

    <delete id="Function.DeleteAll" parameterClass="Function">
      <![CDATA[
                DELETE FROM dbo.[Function]
            ]]>
    </delete>
  </statements>
</sqlMap>