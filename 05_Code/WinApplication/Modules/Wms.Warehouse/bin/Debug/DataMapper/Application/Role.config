<?xml version="1.0" encoding="utf-8"?>

<sqlMap namespace="Role" xmlns="http://ibatis.apache.org/mapping" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <alias>
    <typeAlias alias="Role" type="Business.Domain.Application.Role,Business.Domain" />
  </alias>
    
  <!-- 缓存机制 -->
  <cacheModels>
    <cacheModel id="RoleCache" implementation="MEMORY">
      <!-- 设定缓存有效期，如果超过此设定值，则将此CacheModel缓存清空 -->
      <flushInterval minutes="5" />
      <flushOnExecute statement="Role.Insert" />
      <flushOnExecute statement="Role.Update" />
      <flushOnExecute statement="Role.Delete" />
      <flushOnExecute statement="Role.DeleteAll" />
      <property name="Type" value="Weak" />
    </cacheModel>
  </cacheModels>

  <resultMaps>
    <resultMap class="Role" id="Role_Result">
      <result column="ApplicationId" property="ApplicationId" />
      <result column="RoleId" property="RoleId" />
      <result column="RoleCode" property="RoleCode" />
      <result column="RoleName" property="RoleName" />
      <result column="Remark" property="Remark" />
      <result column="IsActive" property="IsActive" />
    </resultMap>

    <resultMap class="Function" id="Function_Result">
      <result column="ApplicationId" property="ApplicationId" />
      <result column="FunctionId" property="FunctionId" />
      <result column="FunctionLevel" property="FunctionLevel" />
      <result column="ParentId" property="ParentId" />
      <result column="FunctionCode" property="FunctionCode" />
      <result column="FunctionName" property="FunctionName" />
      <result column="ResourceIdentifier" property="ResourceIdentifier" />
      <result column="Remark" property="Remark" />
      <result column="IsActive" property="IsActive" />
    </resultMap>

    <resultMap class="Group" id="Group_Result">
      <result column="ApplicationId" property="ApplicationId" />
      <result column="GroupId" property="GroupId" />
      <result column="GroupLevel" property="GroupLevel" />
      <result column="ParentId" property="ParentId" />
      <result column="GroupCode" property="GroupCode" />
      <result column="GroupName" property="GroupName" />
      <result column="Remark" property="Remark" />
      <result column="IsActive" property="IsActive" />
    </resultMap>

    <resultMap class="User" id="User_Result">
      <result column="ApplicationId" property="ApplicationId" />
      <result column="UserId" property="UserId" />
      <result column="UserCode" property="UserCode" />
      <result column="UserName" property="UserName" />
      <result column="Password" property="Password" />
      <result column="CreateTime" property="CreateTime" />
      <result column="LoginTime" property="LoginTime" />
      <result column="Remark" property="Remark" />
      <result column="IsActive" property="IsActive" />
    </resultMap>
  </resultMaps>

  <parameterMaps>
    <parameterMap id="SplitPagerParameters" class="Hashtable">
      <parameter property="TableName" column="TableName" />
      <parameter property="SelectFields" column="SelectFields" />
      <parameter property="OrderByField" column="OrderByField" />
      <parameter property="PageSize" column="PageSize" />
      <parameter property="PageIndex" column="PageIndex" />
      <parameter property="OrderType" column="OrderType" />
      <parameter property="SelectCondition" column="SelectCondition" />
      <parameter property="RecordsCount" column="RecordsCount" direction="Output" />
    </parameterMap>
  </parameterMaps>

  <statements>
    <select id="Role.Get" resultMap="Role_Result" cacheModel="RoleCache">
      <![CDATA[
                SELECT ApplicationId,RoleId,RoleCode,RoleName,Remark,IsActive FROM dbo.Role WITH (NOLOCK)
                    WHERE RoleId = #RoleId#
            ]]>	
    </select>

    <select id="Role.GetAll" resultMap="Role_Result">
      <![CDATA[
                SELECT ApplicationId,RoleId,RoleCode,RoleName,Remark,IsActive
                    FROM dbo.Role WITH (NOLOCK)
            ]]>
    </select>

    <select id="Role.GetByCondition" resultMap="Role_Result" cacheModel="RoleCache">
      <![CDATA[
                SELECT ApplicationId,RoleId,RoleCode,RoleName,Remark,IsActive
                    FROM dbo.Role WITH (NOLOCK)
                    WHERE $value$
            ]]>
    </select>

    <procedure id="Role.GetByPager" parameterMap="SplitPagerParameters" resultMap="Role_Result">
      <![CDATA[
                Usp_SplitPager
            ]]>
    </procedure>

    <insert id="Role.Insert" parameterClass="Role">
      <![CDATA[
                INSERT INTO dbo.Role 
                    (ApplicationId,RoleCode,RoleName,Remark,IsActive) 
                VALUES 
                    (#ApplicationId#,#RoleCode#,#RoleName#,#Remark#,#IsActive#)
            ]]>	
      <selectKey resultClass="int" type="post" property="RoleId"> 
        <![CDATA[
                SELECT @@IDENTITY as value
            ]]>
      </selectKey>
    </insert>

    <update id="Role.Update" parameterClass="Role">
      <![CDATA[
                UPDATE dbo.Role SET ApplicationId = #ApplicationId#,RoleCode = #RoleCode#,RoleName = #RoleName#,Remark = #Remark#,IsActive = #IsActive#
                    WHERE RoleId = #RoleId#
            ]]>
    </update>

    <delete id="Role.Delete" parameterClass="Role">
      <![CDATA[
                DELETE FROM dbo.Role WHERE RoleId = #RoleId#
            ]]>
    </delete>

    <delete id="Role.DeleteAll" parameterClass="Role">
      <![CDATA[
                DELETE FROM dbo.Role
            ]]>
    </delete>

    <select id="Role.GetFunctions" resultMap="Function_Result" parameterClass="Role">
      <![CDATA[
                SELECT fu.ApplicationId,fu.FunctionId,fu.FunctionLevel,fu.ParentId,fu.FunctionCode,fu.FunctionName,fu.ResourceIdentifier,fu.Remark,fu.IsActive
                FROM dbo.[Function] fu WITH (NOLOCK) 
                INNER JOIN dbo.RoleFunction rf ON rf.FunctionId = fu.FunctionId
                INNER JOIN dbo.Role ro ON ro.RoleId = rf.RoleId
                WHERE ro.RoleId = #RoleId#
            ]]>
    </select>

    <select id="Role.GetGroups" resultMap="Group_Result" parameterClass="Role">
      <![CDATA[
                SELECT gr.ApplicationId,gr.GroupId,gr.GroupLevel,gr.ParentId,gr.GroupCode,gr.GroupName,gr.Remark,gr.IsActive
                FROM dbo.[Group] gr WITH (NOLOCK) 
                INNER JOIN dbo.RoleGroup rg ON rg.GroupId = gr.GroupId
                INNER JOIN dbo.Role ro ON ro.RoleId = rg.RoleId
                WHERE ro.RoleId = #RoleId#
            ]]>
    </select>

    <select id="Role.GetUsers" resultMap="User_Result" parameterClass="Role">
      <![CDATA[
                SELECT us.ApplicationId,us.UserId,us.UserCode,us.UserName,us.Password,us.CreateTime,us.LoginTime,us.Remark,us.IsActive 
                FROM dbo.[User] us WITH (NOLOCK) 
                INNER JOIN dbo.RoleUser ru ON ru.UserId = us.UserId
                INNER JOIN dbo.Role ro ON ro.RoleId = ru.RoleId
                WHERE ro.RoleId = #RoleId#
            ]]>
    </select>
  </statements>
</sqlMap>