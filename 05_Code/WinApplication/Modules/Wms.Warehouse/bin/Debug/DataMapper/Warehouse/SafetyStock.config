<?xml version="1.0" encoding="utf-8"?>

<sqlMap namespace="SafetyStock" xmlns="http://ibatis.apache.org/mapping"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <alias>
    <typeAlias alias="SafetyStock" type="Business.Domain.Warehouse.SafetyStock,Business.Domain" />
  </alias>
    
  <!-- 缓存机制 -->
  <cacheModels>
    <cacheModel id="SafetyStockCache" implementation="MEMORY">
      <!-- 设定缓存有效期，如果超过此设定值，则将此CacheModel缓存清空 -->
      <flushInterval minutes="5" />
      <flushOnExecute statement="SafetyStock.Insert" />
      <flushOnExecute statement="SafetyStock.Update" />
      <flushOnExecute statement="SafetyStock.Delete" />
      <flushOnExecute statement="SafetyStock.DeleteAll" />
      <property name="Type" value="Weak" />
    </cacheModel>
  </cacheModels>

  <resultMaps>
    <resultMap class="SafetyStock" id="SafetyStock_Result">
      <result column="Id" property="Id" />
      <result column="WarehouseId" property="WarehouseId" />
      <result column="SkuId" property="SkuId" />
      <result column="PackId" property="PackId" />
      <result column="MinQty" property="MinQty" />
      <result column="MaxQty" property="MaxQty" />
    </resultMap>
  </resultMaps>

  <parameterMaps>
    <parameterMap id="SplitPagerParameters" class="Hashtable">
      <parameter property="TableName" column="TableName" />
      <parameter property="SelectFields" column="SelectFields" />
      <parameter property="OrderByField" column="OrderByField" />
      <parameter property="PageSize" column="PageSize" />
      <parameter property="PageIndex" column="PageIndex" />
      <parameter property="OrderType" column="OrderType" />
      <parameter property="SelectCondition" column="SelectCondition" />
      <parameter property="RecordsCount" column="RecordsCount" direction="Output" />
    </parameterMap>
  </parameterMaps>

  <statements>
    <select id="SafetyStock.Get" resultMap="SafetyStock_Result" cacheModel="SafetyStockCache">
      <![CDATA[
                SELECT Id,WarehouseId,SkuId,PackId,MinQty,MaxQty FROM dbo.SafetyStock WITH (NOLOCK)
                    WHERE Id = #Id#
            ]]>	
    </select>

    <select id="SafetyStock.GetAll" resultMap="SafetyStock_Result">
      <![CDATA[
                SELECT Id,WarehouseId,SkuId,PackId,MinQty,MaxQty
                    FROM dbo.SafetyStock WITH (NOLOCK)
            ]]>
    </select>

    <select id="SafetyStock.GetByCondition" resultMap="SafetyStock_Result" cacheModel="SafetyStockCache">
      <![CDATA[
                SELECT Id,WarehouseId,SkuId,PackId,MinQty,MaxQty
                    FROM dbo.SafetyStock WITH (NOLOCK)
                    WHERE $value$
            ]]>
    </select>

    <procedure id="SafetyStock.GetByPager" parameterMap="SplitPagerParameters" resultMap="SafetyStock_Result">
      <![CDATA[
                Usp_SplitPager
            ]]>
    </procedure>

    <insert id="SafetyStock.Insert" parameterClass="SafetyStock">
      <![CDATA[
                INSERT INTO dbo.SafetyStock 
                    (WarehouseId,SkuId,PackId,MinQty,MaxQty) 
                VALUES 
                    (#WarehouseId#,#SkuId#,#PackId#,#MinQty#,#MaxQty#)
            ]]>	
      <selectKey resultClass="int" type="post" property="Id"> 
        <![CDATA[
                SELECT @@IDENTITY as value
            ]]>
      </selectKey>
    </insert>

    <update id="SafetyStock.Update" parameterClass="SafetyStock">
      <![CDATA[
                UPDATE dbo.SafetyStock SET WarehouseId = #WarehouseId#,SkuId = #SkuId#,PackId = #PackId#,MinQty = #MinQty#,MaxQty = #MaxQty#
                    WHERE Id = #Id#
            ]]>
    </update>

    <delete id="SafetyStock.Delete" parameterClass="SafetyStock">
      <![CDATA[
                DELETE FROM dbo.SafetyStock WHERE Id = #Id#
            ]]>
    </delete>

    <delete id="SafetyStock.DeleteAll" parameterClass="SafetyStock">
      <![CDATA[
                DELETE FROM dbo.SafetyStock
            ]]>
    </delete>
  </statements>
</sqlMap>