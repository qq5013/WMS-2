<?xml version="1.0" encoding="utf-8"?>

<sqlMap namespace="User" xmlns="http://ibatis.apache.org/mapping" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <alias>
    <typeAlias alias="User" type="Business.Domain.Application.User,Business.Domain" />
    <!--<typeAlias alias="UserFunctionView" type="Business.Domain.Application.UserFunctionView,Business.Domain" />-->
  </alias>
    
  <!-- 缓存机制 -->
  <cacheModels>
    <cacheModel id="UserCache" implementation="MEMORY">
      <!-- 设定缓存有效期，如果超过此设定值，则将此CacheModel缓存清空 -->
      <flushInterval minutes="30" />
      <flushOnExecute statement="User.Insert" />
      <flushOnExecute statement="User.Update" />
      <flushOnExecute statement="User.Delete" />
      <flushOnExecute statement="User.DeleteAll" />
      <property name="Type" value="Weak" />
    </cacheModel>
  </cacheModels>

  <resultMaps>
    <resultMap class="User" id="User_Result">
      <result column="ApplicationId" property="ApplicationId" />
      <result column="UserId" property="UserId" />
      <result column="UserCode" property="UserCode" />
      <result column="UserName" property="UserName" />
      <result column="Password" property="Password" />
      <result column="CreateTime" property="CreateTime" />
      <result column="LoginTime" property="LoginTime" />
      <result column="Remark" property="Remark" />
      <result column="IsActive" property="IsActive" />
    </resultMap>

    <!--<resultMap class="UserFunctionView" id="UserFunctionView_Result">
      <result column="ApplicationId" property="ApplicationId" />
      <result column="UserId" property="UserId" />
      <result column="UserCode" property="UserCode" />
      <result column="UserName" property="UserName" />
      <result column="FunctionId" property="FunctionId" />
      <result column="FunctionCode" property="FunctionCode" />
      <result column="FunctionName" property="FunctionName" />
      <result column="ResourceIdentifier" property="ResourceIdentifier" />
    </resultMap>-->
  </resultMaps>

  <parameterMaps>
    <parameterMap id="SplitPagerParameters" class="Hashtable">
      <parameter property="TableName" column="TableName" />
      <parameter property="SelectFields" column="SelectFields" />
      <parameter property="OrderByField" column="OrderByField" />
      <parameter property="PageSize" column="PageSize" />
      <parameter property="PageIndex" column="PageIndex" />
      <parameter property="OrderType" column="OrderType" />
      <parameter property="SelectCondition" column="SelectCondition" />
      <parameter property="RecordsCount" column="RecordsCount" direction="Output" />
    </parameterMap>
  </parameterMaps>

  <statements>
    <select id="User.Get" resultMap="User_Result" cacheModel="UserCache">
      <![CDATA[
                SELECT ApplicationId,UserId,UserCode,UserName,Password,CreateTime,LoginTime,Remark,IsActive FROM dbo.[User] WITH (NOLOCK)
                    WHERE UserId = #UserId#
            ]]>	
    </select>

    <select id="User.GetAll" resultMap="User_Result">
      <![CDATA[
                SELECT ApplicationId,UserId,UserCode,UserName,Password,CreateTime,LoginTime,Remark,IsActive
                    FROM dbo.[User] WITH (NOLOCK)
            ]]>
    </select>

    <select id="User.GetByCondition" resultMap="User_Result" cacheModel="UserCache">
      <![CDATA[
                SELECT ApplicationId,UserId,UserCode,UserName,Password,CreateTime,LoginTime,Remark,IsActive
                    FROM dbo.[User] WITH (NOLOCK)
                    WHERE $value$
            ]]>
    </select>

    <procedure id="User.GetByPager" parameterMap="SplitPagerParameters" resultMap="User_Result">
      <![CDATA[
                Usp_SplitPager
            ]]>
    </procedure>

    <insert id="User.Insert" parameterClass="User">
      <![CDATA[
                INSERT INTO dbo.[User] 
                    (ApplicationId,UserCode,UserName,Password,CreateTime,LoginTime,Remark,IsActive) 
                VALUES 
                    (#ApplicationId#,#UserCode#,#UserName#,#Password#,#CreateTime#,#LoginTime#,#Remark#,#IsActive#)
            ]]>	
      <selectKey resultClass="int" type="post" property="UserId"> 
        <![CDATA[
                SELECT @@IDENTITY as value
            ]]>
      </selectKey>
    </insert>

    <update id="User.Update" parameterClass="User">
      <![CDATA[
                UPDATE dbo.[User] SET ApplicationId = #ApplicationId#,UserCode = #UserCode#,UserName = #UserName#,Password = #Password#,CreateTime = #CreateTime#,LoginTime = #LoginTime#,Remark = #Remark#,IsActive = #IsActive#
                    WHERE UserId = #UserId#
            ]]>
    </update>

    <delete id="User.Delete" parameterClass="User">
      <![CDATA[
                DELETE FROM dbo.[User] WHERE UserId = #UserId#
            ]]>
    </delete>

    <delete id="User.DeleteAll" parameterClass="User">
      <![CDATA[
                DELETE FROM dbo.[User]
            ]]>
    </delete>

    <!--<select id="UserFunctionView.GetFunctions" resultMap="UserFunctionView_Result">
      <![CDATA[
            SELECT [UserId]
                ,[ApplicationId]
                ,[UserCode]
                ,[UserName]
                ,[FunctionId]
                ,[FunctionCode]
                ,[FunctionName]
                ,[ResourceIdentifier]
            FROM [dbo].[Vw_UserFunction] WITH (NOLOCK)
            WHERE $value$
            ]]>
    </select>-->

    <!--<select id="UserFunctionView.GetByCondition" resultMap="UserFunctionView_Result">
      <![CDATA[ 
            SELECT [UserId]
                ,[ApplicationId]
                ,[UserCode]
                ,[UserName]
                ,[FunctionId]
                ,[FunctionCode]
                ,[FunctionName]
                ,[ResourceIdentifier]
            FROM [dbo].[Vw_UserFunction] WITH (NOLOCK)
            WHERE $value$
            ]]>
    </select>-->
  </statements>
</sqlMap>