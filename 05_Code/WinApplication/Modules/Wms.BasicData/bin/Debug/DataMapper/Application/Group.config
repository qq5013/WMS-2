<?xml version="1.0" encoding="utf-8"?>

<sqlMap namespace="Group" xmlns="http://ibatis.apache.org/mapping"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <alias>
    <typeAlias alias="Group" type="Business.Domain.Application.Group,Business.Domain" />
  </alias>
    
  <!-- 缓存机制 -->
  <cacheModels>
    <cacheModel id="GroupCache" implementation="MEMORY">
      <!-- 设定缓存有效期，如果超过此设定值，则将此CacheModel缓存清空 -->
      <flushInterval minutes="5" />
      <flushOnExecute statement="Group.Insert" />
      <flushOnExecute statement="Group.Update" />
      <flushOnExecute statement="Group.Delete" />
      <flushOnExecute statement="Group.DeleteAll" />
      <property name="Type" value="Weak" />
    </cacheModel>
  </cacheModels>

  <resultMaps>
    <resultMap class="Group" id="Group_Result">
      <result column="ApplicationId" property="ApplicationId" />
      <result column="GroupId" property="GroupId" />
      <result column="GroupLevel" property="GroupLevel" />
      <result column="ParentId" property="ParentId" />
      <result column="GroupCode" property="GroupCode" />
      <result column="GroupName" property="GroupName" />
      <result column="Remark" property="Remark" />
      <result column="IsActive" property="IsActive" />
    </resultMap>

    <resultMap class="User" id="User_Result">
      <result column="ApplicationId" property="ApplicationId" />
      <result column="UserId" property="UserId" />
      <result column="UserCode" property="UserCode" />
      <result column="UserName" property="UserName" />
      <result column="Password" property="Password" />
      <result column="CreateTime" property="CreateTime" />
      <result column="LoginTime" property="LoginTime" />
      <result column="Remark" property="Remark" />
      <result column="IsActive" property="IsActive" />
    </resultMap>
  </resultMaps>

  <parameterMaps>
    <parameterMap id="SplitPagerParameters" class="Hashtable">
      <parameter property="TableName" column="TableName" />
      <parameter property="SelectFields" column="SelectFields" />
      <parameter property="OrderByField" column="OrderByField" />
      <parameter property="PageSize" column="PageSize" />
      <parameter property="PageIndex" column="PageIndex" />
      <parameter property="OrderType" column="OrderType" />
      <parameter property="SelectCondition" column="SelectCondition" />
      <parameter property="RecordsCount" column="RecordsCount" direction="Output" />
    </parameterMap>
  </parameterMaps>

  <statements>
    <select id="Group.Get" resultMap="Group_Result" cacheModel="GroupCache">
      <![CDATA[
                SELECT ApplicationId,GroupId,GroupLevel,ParentId,GroupCode,GroupName,Remark,IsActive FROM dbo.[Group] WITH (NOLOCK)
                    WHERE GroupId = #GroupId#
            ]]>	
    </select>

    <select id="Group.GetAll" resultMap="Group_Result">
      <![CDATA[
                SELECT ApplicationId,GroupId,GroupLevel,ParentId,GroupCode,GroupName,Remark,IsActive
                    FROM dbo.[Group] WITH (NOLOCK)
            ]]>
    </select>

    <select id="Group.GetByCondition" resultMap="Group_Result" cacheModel="GroupCache">
      <![CDATA[
                SELECT ApplicationId,GroupId,GroupLevel,ParentId,GroupCode,GroupName,Remark,IsActive
                    FROM dbo.[Group] WITH (NOLOCK)
                    WHERE $value$
            ]]>
    </select>

    <procedure id="Group.GetByPager" parameterMap="SplitPagerParameters" resultMap="Group_Result">
      <![CDATA[
                Usp_SplitPager
            ]]>
    </procedure>

    <insert id="Group.Insert" parameterClass="Group">
      <![CDATA[
                INSERT INTO dbo.[Group] 
                    (ApplicationId,GroupLevel,ParentId,GroupCode,GroupName,Remark,IsActive) 
                VALUES 
                    (#ApplicationId#,#GroupLevel#,#ParentId#,#GroupCode#,#GroupName#,#Remark#,#IsActive#)
            ]]>	
      <selectKey resultClass="int" type="post" property="GroupId"> 
        <![CDATA[
                SELECT @@IDENTITY as value
            ]]>
      </selectKey>
    </insert>

    <update id="Group.Update" parameterClass="Group">
      <![CDATA[
                UPDATE dbo.[Group] SET ApplicationId = #ApplicationId#,GroupLevel = #GroupLevel#,ParentId = #ParentId#,GroupCode = #GroupCode#,GroupName = #GroupName#,Remark = #Remark#,IsActive = #IsActive#
                    WHERE GroupId = #GroupId#
            ]]>
    </update>

    <delete id="Group.Delete" parameterClass="Group">
      <![CDATA[
                DELETE FROM dbo.[Group] WHERE GroupId = #GroupId#
            ]]>
    </delete>

    <delete id="Group.DeleteAll" parameterClass="Group">
      <![CDATA[
                DELETE FROM dbo.[Group]
            ]]>
    </delete>

    <select id="Group.GetUsers" resultMap="User_Result" parameterClass="Group">
      <![CDATA[
                SELECT us.ApplicationId,us.UserId,us.UserCode,us.UserName,us.Password,us.CreateTime,us.LoginTime,us.Remark,us.IsActive 
                FROM dbo.[User] us WITH (NOLOCK) 
                INNER JOIN dbo.[GroupUser] gu on gu.UserId = us.UserId
                INNER JOIN dbo.[Group] gr on gr.GroupId = gu.GroupId
                WHERE gr.GroupId = #GroupId#
            ]]>
    </select>
  </statements>
</sqlMap>